#!/usr/bin/env bash
#
# Unicornsay
# Prints a message inside a bubble next to (or above) a unicorn ASCII art.
# Usage:
#   ./unicornsay [--above] [--art=big|small] [--side=left|right] "Your message here"
#   echo "Your message here" | ./unicornsay [--above] [--art=big|small] [--side=left|right]

###############################################################################
# Constants / Configuration
###############################################################################

REQUIRED_COMMANDS=("tput" "fold" "wc" "head" "printf" "cat" "seq" "command" "read" "echo")

###############################################################################
# Function: check_requirements
# Checks if all required external commands are available.
###############################################################################
check_requirements() {
  local missing=false
  for cmd in "${REQUIRED_COMMANDS[@]}"; do
    if ! command -v "$cmd" &>/dev/null; then
      echo "Error: '$cmd' command is required but not found in PATH."
      missing=true
    fi
  done
  if [ "$missing" = true ]; then
    exit 1
  fi
}

###############################################################################
# Function: usage
# Prints usage information for this script.
###############################################################################
usage() {
  cat <<EOF
Usage: $0 [--above] [--art=big|small] [--side=left|right] "message"
       echo "message" | $0 [--above] [--art=big|small] [--side=left|right]

Options:
  --above               Force the unicorn to be displayed below the message bubble,
                        even if terminal width is sufficient for side-by-side.
  --art=big|small       Force the script to use the large or small unicorn ASCII art.
                        (If not specified, the script decides based on terminal height.)
  --side=left|right     Place the unicorn on the left or right side when side-by-side.
                        (If not specified, unicorn defaults to the left side.)

Description:
  Prints a unicorn ASCII art along with a stylized speech bubble containing
  the provided message. The bubble is displayed side-by-side with the
  unicorn if the terminal width is large (or if not forced above),
  or placed above if '--above' is specified or if the terminal is too narrow.
EOF
}

###############################################################################
# Function: get_width
# Returns the width of the first line of the input text.
###############################################################################
get_width() {
  echo "$(head -n1 <<<"$@" | wc -c)"
}

###############################################################################
# Function: get_height
# Returns the height of the input text.
###############################################################################
get_height() {
  echo "$@" | wc -l
}

###############################################################################
# Function: unicorn_art_large_left
# Prints the large unicorn ASCII art (suitable for bigger terminals).
###############################################################################
unicorn_art_large_left() {
  cat <<'EOF'
                ,.. /    
              ,'   ';    
   ,,.__    _,' /';  .   
  :','  ~~~~    '. '`    
  :' (   )         )::,  
  '. '. .=----=..-~  .;' 
   '  ;'  ::   ':.  '    
     (:   ':    ;)       
      \   '"  ./         
       '"      '"        
EOF
}

###############################################################################
# Function: unicorn_art_large_right
# Prints the large unicorn ASCII art (suitable for bigger terminals),
# aligned to the right side.
###############################################################################
unicorn_art_large_right() {
  cat <<'EOF'
   \ ..,                 
   ;'   ',               
   .  ;'\ ',_    __.,,   
   `' .'     ~~~~  ',':  
   ,::(         (   ) ': 
  ';.  ~-..=----=. .' .' 
     '  .:'   ::  ';  '  
        (;    :'   :)    
          \.  "'   /     
         "'      "'      
EOF
}

###############################################################################
# Function: unicorn_art_small_left
# Prints a smaller unicorn ASCII art, aligned to the left.
###############################################################################
unicorn_art_small_left() {
  cat <<'EOF'
             /   
          ,,/_   
    _     ~/=-"  
   ~ )___~//     
   _//---\|_     
  /        /     
EOF
}

###############################################################################
# Function: unicorn_art_small_right
# Prints a smaller unicorn ASCII art, aligned to the right.
###############################################################################
unicorn_art_small_right() {
  cat <<'EOF'
   \             
   _\,,          
  "-=\~     _    
     \\~___( ~   
      _|/---\\_  
      \        \ 
EOF
}

###############################################################################
# Bubble Rendering Functions
###############################################################################

###############################################################################
# Function: print_border
# Prints the top or bottom border of the message bubble.
# Arguments:
#   $1 - "top" or "bottom"
#   $2 - The string of repeated border characters (e.g., '─' x some length)
###############################################################################
print_border() {
  local border_type="$1"
  local border_str="$2"
  if [ "$border_type" = "top" ]; then
    echo "┌${border_str}┐"
  else
    echo "└${border_str}┘"
  fi
}

###############################################################################
# Function: print_empty_line
# Prints an empty (padding) line within the bubble.
# Arguments:
#   $1 - The width to fill
###############################################################################
print_empty_line() {
  local length="$1"
  printf "│   %-*s   │\n" "$length" ""
}

###############################################################################
# Function: print_message_line
# Prints a single line of the message within the bubble.
# Arguments:
#   $1 - The width of the bubble's content area
#   $2 - The actual line to print
###############################################################################
print_message_line() {
  local length="$1"
  local line="$2"
  printf "│   %-*s   │\n" "$length" "$line"
}

###############################################################################
# Function: message_bubble
# Arguments:
#   $1 - The message to display
#   $2 - Optional offset (indentation) for side-by-side alignment
# Outputs:
#   The entire bubble as multiple lines of text (via echo).
###############################################################################
message_bubble() {
  local message="$1"
  local offset="${2:-0}"
  local terminal_width
  terminal_width=$(tput cols)

  # Calculate wrap width
  local wrap_width=$((terminal_width - 9 - offset))
  [ $wrap_width -lt 1 ] && wrap_width=1

  # Use fold for word wrapping
  local wrapped_message
  wrapped_message=$(echo "$message" | fold -s -w $wrap_width)

  # Find max line length in one pass
  local length=0
  while IFS= read -r wrapped_line; do
    ((${#wrapped_line} > length)) && length=${#wrapped_line}
  done <<<"$wrapped_message"

  # Build border line
  local border_length=$((length + 6))
  local border_chars
  border_chars="$(printf '─%.0s' $(seq 1 "$border_length"))"

  # Compose bubble
  {
    echo "┌${border_chars}┐"
    printf "│   %-*s   │\n" "$length" ""
    while IFS= read -r wm; do
      printf "│   %-*s   │\n" "$length" "$wm"
    done <<<"$wrapped_message"
    printf "│   %-*s   │\n" "$length" ""
    echo "└${border_chars}┘"
  }
}

###############################################################################
# Function: adjust_unicorn_spacing_side_by_side
# Places two blocks of text side-by-side: blockA + blockB.
#   - If side="left", blockA is the unicorn, blockB is the bubble.
#   - If side="right", blockA is the bubble,  blockB is the unicorn.
# Arguments:
#   $1 - The first block (multi-line string)
#   $2 - The second block (multi-line string)
###############################################################################
adjust_unicorn_spacing_side_by_side() {
  local blockA="$1"
  local blockB="$2"

  IFS=$'\n' read -rd '' -a linesA <<<"$blockA"
  IFS=$'\n' read -rd '' -a linesB <<<"$blockB"

  # Find the widest line in blockA
  local widestA=0
  for line in "${linesA[@]}"; do
    ((${#line} > widestA)) && widestA=${#line}
  done

  # We'll combine lines side by side. If one block is taller, we pad the other.
  local maxCount=$((${#linesA[@]} > ${#linesB[@]} ? ${#linesA[@]} : ${#linesB[@]}))

  # Pad the shorter block to align the unicorn art at the bottom
  if [ ${#linesA[@]} -lt ${#linesB[@]} ]; then
    local padding=$((${#linesB[@]} - ${#linesA[@]}))
    for ((i = 0; i < padding; i++)); do
      linesA=("" "${linesA[@]}")
    done
  else
    local padding=$((${#linesA[@]} - ${#linesB[@]}))
    for ((i = 0; i < padding; i++)); do
      linesB=("" "${linesB[@]}")
    done
  fi

  for ((i = 0; i < maxCount; i++)); do
    local leftLine="${linesA[i]:-}"
    local rightLine="${linesB[i]:-}"
    # Print leftLine, then some spacing, then rightLine
    printf "%-*s%s\n" "$widestA" "$leftLine" "$rightLine"
  done
}

###############################################################################
# Function: print_side_by_side
# Prints the message bubble and unicorn art side-by-side.
# Arguments:
#   $1 - The message to display
#   $2 - The unicorn art
#   $3 - The side ("left" or "right")
###############################################################################
print_side_by_side() {
  local message="$1"
  local unicorn_art="$2"
  local side="$3"

  local bubble_text
  local widest_unicorn_line
  widest_unicorn_line="$(head -n1 <<<"$unicorn_art")"
  local unicorn_width=${#widest_unicorn_line}
  bubble_text="$(message_bubble "$message" "$unicorn_width")"

  if [ "$side" = "right" ]; then
    adjust_unicorn_spacing_side_by_side "$bubble_text" "$unicorn_art"
  else
    adjust_unicorn_spacing_side_by_side "$unicorn_art" "$bubble_text"
  fi
}

###############################################################################
# Function: get_unicorn_art
# Returns the appropriate unicorn ASCII art based on size and side.
# Arguments:
#   $1 - The art size ("big" or "small")
#   $2 - The side ("left" or "right")
###############################################################################
get_unicorn_art() {
  local art_size="$1"
  local side="$2"

  if [ "$art_size" = "big" ]; then
    if [ "$side" = "right" ]; then
      unicorn_art_large_right
    else
      unicorn_art_large_left
    fi
  else
    if [ "$side" = "right" ]; then
      unicorn_art_small_right
    else
      unicorn_art_small_left
    fi
  fi
}

################fi##############################################################
# Function: print_above
# Prints the message bubble above the unicorn art.
# Arguments:
#   $1 - The message to display
#   $2 - The unicorn art
#   $3 - The side ("left" or "right")
###############################################################################
print_above() {
  local message="$1"
  local unicorn_art="$2"
  local side="$3"

  message_bubble "$message"

  if [ "$side" = "right" ]; then
    local terminal_width
    terminal_width=$(tput cols)
    while IFS= read -r line; do
      printf "%*s\n" "$terminal_width" "$line"
    done <<<"$unicorn_art"
  else
    echo "$unicorn_art"
  fi
}

###############################################################################
# Function: print_message_with_unicorn
# Determines whether to print the unicorn side-by-side or above the bubble,
# and which art size/side to use.
# Arguments:
#   $1 - The message to display
#   $2 - Boolean flag "true" if forced above
#   $3 - The forced art size (big/small) if specified, else empty
#   $4 - The forced side (left/right) if specified, else "left"
###############################################################################
print_message_with_unicorn() {
  local message="$1"
  local force_above="$2"
  local art_size="$3"
  local side="$4"

  local terminal_cols
  terminal_cols=$(tput cols)
  local terminal_rows
  terminal_rows=$(tput lines)

  # Determine which unicorn art to use
  local unicorn_art
  unicorn_art="$(get_unicorn_art "$art_size" "$side")"

  # Decide whether to print side-by-side or above
  if [ "$force_above" = true ] || [ "$terminal_cols" -lt 60 ]; then
    print_above "$message" "$unicorn_art" "$side"
  else
    print_side_by_side "$message" "$unicorn_art" "$side"
  fi
}

###############################################################################
# Main: Parse arguments, handle input, print result.
###############################################################################
main() {
  check_requirements

  local force_above=false
  local art_size="big" # Could be "big" or "small" if user specified
  local side="left"    # Default side

  local input_message=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --above)
      force_above=true
      shift
      ;;
    --art=*)
      art_size="${1#*=}"
      # Validate it (optional: you can skip)
      if [[ "$art_size" != "big" && "$art_size" != "small" ]]; then
        echo "Error: --art must be 'big' or 'small'."
        exit 1
      fi
      shift
      ;;
    --side=*)
      side="${1#*=}"
      # Validate it (optional: you can skip)
      if [[ "$side" != "left" && "$side" != "right" ]]; then
        echo "Error: --side must be 'left' or 'right'."
        exit 1
      fi
      shift
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      # If it's not an option, treat it as part of the message
      input_message="$1"
      shift
      ;;
    esac
  done

  # If there's data in stdin and no message in arguments
  if [ -p /dev/stdin ] && [ -z "$input_message" ]; then
    input_message="$(cat)"
  fi

  # If still no message, show usage
  if [ -z "$input_message" ]; then
    usage
    exit 1
  fi

  # If ansi2txt is available, convert any ANSI escapes to plain text
  if command -v ansi2txt &>/dev/null; then
    input_message="$(echo "$input_message" | ansi2txt)"
  fi

  print_message_with_unicorn "$input_message" "$force_above" "$art_size" "$side"
}

# Run script
main "$@"
